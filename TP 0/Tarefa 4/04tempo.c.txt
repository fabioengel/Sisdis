/*
 * Autor: Fábio Engel de Camargo
 * Disciplina: Sistemas Distribuídos INFO7046
 * Data da última alteração: 08/04/2019
 * Tarefa 4: Cada nodo sem falha ao testar outro nodo sem falha obtém informações sobre aqueles nodos que não testou.
 */

#include <stdlib.h>
#include <stdio.h>
#include "smpl.h"

// Eventos
#define TEST 1
#define FAULT 2
#define REPAIR 3

#define simulationTime 135.0

/* descritor do nodo */
typedef struct{
	int id;
	int *state;
}tnodo;

tnodo *nodo;

typedef struct {
  int size;      // slots used so far
  int capacity;  // total available slots
  int *data;     // array of integers we're storing
} failVector;


void testNextUntilNoFail(tnodo *nodos, int n, int tokenID);
void getStatus(tnodo *nodos, int N, int tester, int toTest, int *failV, int qtdfailnodes);
void printStatus(tnodo *nodos, int n, int tokenID);


//Cada nó mantem seu vetor State o qual armazena os estados dos outros nodos

void testNextUntilNoFail(tnodo *nodos, int n, int tokenID){

	int antecessor = tokenID;
	int next = (antecessor	+ 1) % n;
	int nextStatus = -1;
	int failVector[n];
	int failnodes = 0;

	while(nextStatus != 0){
		nextStatus = status(nodos[next].id);
		if(nextStatus == 1){//próximo nó possui falha
			printf("time: %4.1f\tNode %02d performs test in Node %02d\t\033[0;31;107mNode %02d is faulty\033[0m.\n", time(), tokenID, next, next);
			//atualiza state

			nodo[tokenID].state[next] = 1;
			failVector[failnodes] = next;
			failnodes++;

			antecessor++;
			next = (antecessor + 1) % n;
			nextStatus = status(nodos[next].id);
		}
	}
	if(nextStatus == 0 && next == tokenID){//próximo nó sem falha é ele mesmo
		printf("\033[1;31;32mtime: %4.1f\tNode %02d is the only one fault-free in the system.\033[0m\n", time(), tokenID);

	}
	else if(nextStatus == 0){ //próximo nó sem falha
		//atualiza state
		getStatus(nodos, n, tokenID, next, failVector, failnodes);
		nodo[tokenID].state[next] = 0;
		printf("time: %4.1f\tNode %02d performs test in Node %02d\tNode %02d status vector: ",time(), tokenID, next, tokenID);
		printStatus(nodo, n, tokenID);
	}

}

void getStatus(tnodo *nodos, int N, int tester, int toTest, int *failV, int qtdfailnodes){
	int i = 0;
	for(i = 0; i < N; ++i){
		if(i != tester && i != toTest){
			nodo[tester].state[i] = nodo[toTest].state[i];
		}
	}

	for(i = 0; i < qtdfailnodes; ++i){
		nodo[tester].state[failV[i]] = 1;
	}

}

void printStatus(tnodo *nodos, int n, int tokenID){
	int it;
	int stat;
	printf("[");
	for (it = 0; it < n; ++it){
		stat = nodo[tokenID].state[it];
		if(stat == -1){
			printf("\033[1;39;39m%3d\033[0m", stat);
		}
		if(stat == 0){
			printf("\033[1;39;34m%3d\033[0m", stat);
		}

		if(stat == 1){
			printf("\033[1;39;31m%3d\033[0m", stat);
		}
	}
	printf(" ]\n");
}



int main(int argc, char * argv[]){
	static int N, //Número de nodos
			token, event,r,i,tr,t,j;
	tr = 1; // indica a rodada de testes;
	t = -1; // utilizada para verificar se houve mudança no tempo de execução e imprimir mensagem de nova rodada de testes

	static char fa_name[5];

	if(argc != 2){
		puts("Wrong input, use: ./tempo <number_of_nodes>");
		exit(1);
	}

	N = atoi(argv[1]);
	smpl(0, "Ttempo");
	reset();
	stream(1);

	printf("----- Simulation with %d Nodes -----\n", N);
	// Inicializacao
	nodo = (tnodo *) malloc(sizeof(tnodo) * N);

	for(i = 0; i < N; ++i) {
		memset(fa_name, '\0', 5);
		sprintf(fa_name, "%d", i);
		nodo[i].id = facility(fa_name, 1);

		//Inicialização do vetor de estados
		nodo[i].state = malloc(N*sizeof(int));
		for(j = 0; j < N; ++j){
			nodo[i].state[j] = -1;
		}
	}

	// Schedule de eventos
	for (i = 0; i < N; ++i) {
		schedule(TEST, 10.0, i);
	}

	schedule(FAULT, 35.0, 3);
	schedule(FAULT, 35.0, 4);
	schedule(FAULT, 38.0, 5);
	schedule(FAULT, 42.0, 0);
	schedule(REPAIR, 70, 4);
	schedule(REPAIR, 65.0, 3);
	schedule(REPAIR, 66.0, 0);
	schedule(REPAIR, 75.0, 5);

	while(time() < simulationTime) {
		cause(&event, &token);
		switch(event){
			case TEST:
				if(time() > simulationTime){break;}
				if(t < time()){
					printf("\t\t----- Start test round %d -----\n", tr);
					t = time();
					tr++;
				}
				if(status(nodo[token].id) != 0){
					printf("time: %4.1f\tNode %02d is faulty.\n",time(), token);
				}
				else{
					testNextUntilNoFail(nodo, N, token); // realiza teste até encontrar nó não falho.
				}

				schedule(TEST, 10.0, token);
				break;

			case FAULT:
				r = request(nodo[token].id, token, 0);
				if(r != 0){
					puts("Não foi possível falhar o nodo");
					exit(1);
				}
				printf("\033[1;31;107mtime: %4.1f\tNode %02d failed.\033[0m\n",time(), token );
				break;

			case REPAIR:
				release(nodo[token].id, token);
				printf("\033[1;34;107mtime: %4.1f\tNode %02d recovered.\033[0m\n",time(), token );
				break;
		}

	}

}
